
import 'main.adept'

enum WeaponKind (NONE, SWORD, AXE, CHAINSAW, CLUB, SPEAR, DAGGER, IRONFIST, CLAW, LIGHTSTICK, STAFF, TRIDENT, ORB, GRATER)

struct WeaponData (kind WeaponKind, idle CaptTexture, attack CaptTexture, duration int, cooldown int, x_balance float, in_front bool, damage float)
func weaponData(kind WeaponKind, idle CaptTexture, attack CaptTexture, duration int, cooldown int, x_balance float, in_front bool, damage float) WeaponData {
    wd WeaponData
    wd.kind = kind
    wd.idle = idle
    wd.attack = attack
    wd.duration = duration
    wd.cooldown = cooldown
    wd.x_balance = x_balance
    wd.in_front = in_front
    wd.damage = damage
    return wd
}

weapon_data <WeaponData> List

func initWeaponData {
    weapon_data.clear()
    weapon_data.add(weaponData(WeaponKind::SWORD, textures.sword, textures.sword_attack, 10, 3, -6.0f, true, 5.0f))
    weapon_data.add(weaponData(WeaponKind::AXE, textures.axe, textures.axe_attack, 12, 5, -4.0f, false, 10.0f))
    weapon_data.add(weaponData(WeaponKind::CHAINSAW, textures.chainsaw, textures.chainsaw_attack, 3, 0, -8.0f, true, 1.0f))
    weapon_data.add(weaponData(WeaponKind::CLUB, textures.club, textures.club_attack, 10, 7, -6.0f, true, 7.0f))
    weapon_data.add(weaponData(WeaponKind::SPEAR, textures.spear, textures.spear_attack, 8, 60, -6.0f, true, 30.0f))
    weapon_data.add(weaponData(WeaponKind::DAGGER, textures.dagger, textures.dagger_attack, 10, 15, -5.0f, true, 15.0f))
    weapon_data.add(weaponData(WeaponKind::IRONFIST, textures.ironfist, textures.ironfist_attack, 8, 8, -4.0f, true, 6.0f))
    weapon_data.add(weaponData(WeaponKind::CLAW, textures.claw, textures.claw_attack, 12, 8, -6.0f, true, 8.0f))
    weapon_data.add(weaponData(WeaponKind::LIGHTSTICK, textures.lightstick, textures.lightstick_attack, 10, 120, -6.0f, true, 6.0f))
    weapon_data.add(weaponData(WeaponKind::STAFF, textures.staff, textures.staff_attack, 12, 6, -6.0f, true, 15.0f))
    weapon_data.add(weaponData(WeaponKind::TRIDENT, textures.trident, textures.trident_attack, 10, 10, -6.0f, true, 17.0f))
    weapon_data.add(weaponData(WeaponKind::ORB, textures.orb, textures.orb_attack, 15, 5, -6.0f, true, 20.0f))
    weapon_data.add(weaponData(WeaponKind::GRATER, textures.grater, textures.grater_attack, 8, 5, -6.0f, true, 12.0f))
}

func randomWeaponKind WeaponKind {
    return cast WeaponKind (rand() % 13 + 1)
}

func semiRandomWeaponKind(xp usize) WeaponKind {
    if xp <  3, return cast WeaponKind (1)
    if xp <  8, return cast WeaponKind (rand() % 2 + 1)
    if xp < 13, return cast WeaponKind (rand() % 3 + 1)
    if xp < 18, return cast WeaponKind (rand() % 4 + 1)
    if xp < 23, return cast WeaponKind (rand() % 5 + 1)
    if xp < 28, return cast WeaponKind (rand() % 6 + 1)
    if xp < 33, return cast WeaponKind (rand() % 7 + 1)
    if xp < 38, return cast WeaponKind (rand() % 8 + 1)
    if xp < 43, return cast WeaponKind (rand() % 9 + 1)
    if xp < 48, return cast WeaponKind (rand() % 10 + 1)
    if xp < 53, return cast WeaponKind (rand() % 11 + 1)
    if xp < 58, return cast WeaponKind (rand() % 12 + 1)
    return cast WeaponKind (rand() % 13 + 1)
}

func findWeaponData(kind WeaponKind) *WeaponData {
    each WeaponData in weapon_data {
        if it.kind == kind, return &it
    }
    
    printf('INTERNAL ERROR: weapon_data doesn\'t contain data for weapon kind %d\n', kind as int)
    exit(1)
    return null
}
